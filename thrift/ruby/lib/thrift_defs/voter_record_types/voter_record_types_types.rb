#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'thrift_defs/geo_types/geo_types_types'


module ThriftDefs
  module VoterRecordTypes
    module VoterScore
      UNREGISTERED = 1
      NEVER = 2
      INFREQUENT = 3
      FREQUENT = 4
      SUPER = 5
      VALUE_MAP = {1 => "UNREGISTERED", 2 => "NEVER", 3 => "INFREQUENT", 4 => "FREQUENT", 5 => "SUPER"}
      VALID_VALUES = Set.new([UNREGISTERED, NEVER, INFREQUENT, FREQUENT, SUPER]).freeze
    end

    module VoteType
      ABSENTEE = 1
      EARLY = 2
      INELIGIBLE = 3
      NO_RECORD = 4
      VOTED = 5
      MAIL = 6
      AT_POLL = 7
      PROVISIONAL = 8
      VALUE_MAP = {1 => "ABSENTEE", 2 => "EARLY", 3 => "INELIGIBLE", 4 => "NO_RECORD", 5 => "VOTED", 6 => "MAIL", 7 => "AT_POLL", 8 => "PROVISIONAL"}
      VALID_VALUES = Set.new([ABSENTEE, EARLY, INELIGIBLE, NO_RECORD, VOTED, MAIL, AT_POLL, PROVISIONAL]).freeze
    end

    module PhoneType
      LANDLINE = 1
      VOIP = 2
      WIRELESS = 3
      VALUE_MAP = {1 => "LANDLINE", 2 => "VOIP", 3 => "WIRELESS"}
      VALID_VALUES = Set.new([LANDLINE, VOIP, WIRELESS]).freeze
    end

    module EmailMatchType
      INDIVIDUAL = 1
      HOUSEHOLD = 2
      VALUE_MAP = {1 => "INDIVIDUAL", 2 => "HOUSEHOLD"}
      VALID_VALUES = Set.new([INDIVIDUAL, HOUSEHOLD]).freeze
    end

    module PoliticalParty
      CONSERVATIVE = 1
      DEMOCRAT = 2
      GREEN = 3
      INDEPENDENT = 4
      LIBERTARIAN = 5
      NO_PARTY = 6
      OTHER = 7
      REPUBLICAN = 8
      UNAFFILIATED = 9
      UNKNOWN = 10
      WORKING_FAM = 11
      VALUE_MAP = {1 => "CONSERVATIVE", 2 => "DEMOCRAT", 3 => "GREEN", 4 => "INDEPENDENT", 5 => "LIBERTARIAN", 6 => "NO_PARTY", 7 => "OTHER", 8 => "REPUBLICAN", 9 => "UNAFFILIATED", 10 => "UNKNOWN", 11 => "WORKING_FAM"}
      VALID_VALUES = Set.new([CONSERVATIVE, DEMOCRAT, GREEN, INDEPENDENT, LIBERTARIAN, NO_PARTY, OTHER, REPUBLICAN, UNAFFILIATED, UNKNOWN, WORKING_FAM]).freeze
    end

    class Scores; end

    class VoterRecord; end

    class VoterRecords; end

    class UniqueIdentifiers < ::Thrift::Union; end

    class Scores
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ACTIVIST = 1
      CAMPAIGN_FINANCE = 2
      CATHOLIC = 3
      CHILDREN_PRESENT = 4
      CLIMATE_CHANGE = 5
      COLLEGE_FUNDING = 6
      COLLEGE_GRADUATE = 7
      EVANGELICAL = 8
      GOVT_PRIVACY = 9
      GUN_CONTROL = 10
      GUNOWNER = 11
      HIGH_SCHOOL_ONLY = 12
      IDEOLOGY = 13
      INCOME_RANK = 14
      LOCAL_VOTER = 15
      MARRIAGE = 16
      MIDTERM_GENERAL_TURNOUT = 17
      MINIMUM_WAGE = 18
      MORAL_AUTHORITY = 19
      MORAL_CARE = 20
      MORAL_EQUALITY = 21
      MORAL_EQUITY = 22
      MORAL_LOYALTY = 23
      MORAL_PURITY = 24
      NON_PRESIDENTIAL_PRIMARY_TURNOUT = 25
      NONCHRISTIAN = 26
      OFFYEAR_GENERAL_TURNOUT = 27
      OTHERCHRISTIAN = 28
      PAID_LEAVE = 29
      PARTISAN = 30
      PATH_TO_CITIZEN = 31
      PRESIDENTIAL_GENERAL_TURNOUT = 32
      PRESIDENTIAL_PRIMARY_TURNOUT = 33
      PROCHOICE = 34
      TAX_ON_WEALTHY = 35
      TEAPARTY = 36
      TRUMP_RESISTANCE = 37
      TRUMP_SUPPORT = 38
      VETERAN = 39
      RACE_WHITE = 40
      RACE_AFAM = 41
      RACE_HISP = 42
      RACE_NATAM = 43
      RACE_ASIAN = 44

      FIELDS = {
        ACTIVIST => {:type => ::Thrift::Types::DOUBLE, :name => 'activist'},
        CAMPAIGN_FINANCE => {:type => ::Thrift::Types::DOUBLE, :name => 'campaign_finance'},
        CATHOLIC => {:type => ::Thrift::Types::DOUBLE, :name => 'catholic'},
        CHILDREN_PRESENT => {:type => ::Thrift::Types::DOUBLE, :name => 'children_present'},
        CLIMATE_CHANGE => {:type => ::Thrift::Types::DOUBLE, :name => 'climate_change'},
        COLLEGE_FUNDING => {:type => ::Thrift::Types::DOUBLE, :name => 'college_funding'},
        COLLEGE_GRADUATE => {:type => ::Thrift::Types::DOUBLE, :name => 'college_graduate'},
        EVANGELICAL => {:type => ::Thrift::Types::DOUBLE, :name => 'evangelical'},
        GOVT_PRIVACY => {:type => ::Thrift::Types::DOUBLE, :name => 'govt_privacy'},
        GUN_CONTROL => {:type => ::Thrift::Types::DOUBLE, :name => 'gun_control'},
        GUNOWNER => {:type => ::Thrift::Types::DOUBLE, :name => 'gunowner'},
        HIGH_SCHOOL_ONLY => {:type => ::Thrift::Types::DOUBLE, :name => 'high_school_only'},
        IDEOLOGY => {:type => ::Thrift::Types::DOUBLE, :name => 'ideology'},
        INCOME_RANK => {:type => ::Thrift::Types::DOUBLE, :name => 'income_rank'},
        LOCAL_VOTER => {:type => ::Thrift::Types::DOUBLE, :name => 'local_voter'},
        MARRIAGE => {:type => ::Thrift::Types::DOUBLE, :name => 'marriage'},
        MIDTERM_GENERAL_TURNOUT => {:type => ::Thrift::Types::DOUBLE, :name => 'midterm_general_turnout'},
        MINIMUM_WAGE => {:type => ::Thrift::Types::DOUBLE, :name => 'minimum_wage'},
        MORAL_AUTHORITY => {:type => ::Thrift::Types::DOUBLE, :name => 'moral_authority'},
        MORAL_CARE => {:type => ::Thrift::Types::DOUBLE, :name => 'moral_care'},
        MORAL_EQUALITY => {:type => ::Thrift::Types::DOUBLE, :name => 'moral_equality'},
        MORAL_EQUITY => {:type => ::Thrift::Types::DOUBLE, :name => 'moral_equity'},
        MORAL_LOYALTY => {:type => ::Thrift::Types::DOUBLE, :name => 'moral_loyalty'},
        MORAL_PURITY => {:type => ::Thrift::Types::DOUBLE, :name => 'moral_purity'},
        NON_PRESIDENTIAL_PRIMARY_TURNOUT => {:type => ::Thrift::Types::DOUBLE, :name => 'non_presidential_primary_turnout'},
        NONCHRISTIAN => {:type => ::Thrift::Types::DOUBLE, :name => 'nonchristian'},
        OFFYEAR_GENERAL_TURNOUT => {:type => ::Thrift::Types::DOUBLE, :name => 'offyear_general_turnout'},
        OTHERCHRISTIAN => {:type => ::Thrift::Types::DOUBLE, :name => 'otherchristian'},
        PAID_LEAVE => {:type => ::Thrift::Types::DOUBLE, :name => 'paid_leave'},
        PARTISAN => {:type => ::Thrift::Types::DOUBLE, :name => 'partisan'},
        PATH_TO_CITIZEN => {:type => ::Thrift::Types::DOUBLE, :name => 'path_to_citizen'},
        PRESIDENTIAL_GENERAL_TURNOUT => {:type => ::Thrift::Types::DOUBLE, :name => 'presidential_general_turnout'},
        PRESIDENTIAL_PRIMARY_TURNOUT => {:type => ::Thrift::Types::DOUBLE, :name => 'presidential_primary_turnout'},
        PROCHOICE => {:type => ::Thrift::Types::DOUBLE, :name => 'prochoice'},
        TAX_ON_WEALTHY => {:type => ::Thrift::Types::DOUBLE, :name => 'tax_on_wealthy'},
        TEAPARTY => {:type => ::Thrift::Types::DOUBLE, :name => 'teaparty'},
        TRUMP_RESISTANCE => {:type => ::Thrift::Types::DOUBLE, :name => 'trump_resistance'},
        TRUMP_SUPPORT => {:type => ::Thrift::Types::DOUBLE, :name => 'trump_support'},
        VETERAN => {:type => ::Thrift::Types::DOUBLE, :name => 'veteran'},
        RACE_WHITE => {:type => ::Thrift::Types::DOUBLE, :name => 'race_white'},
        RACE_AFAM => {:type => ::Thrift::Types::DOUBLE, :name => 'race_afam'},
        RACE_HISP => {:type => ::Thrift::Types::DOUBLE, :name => 'race_hisp'},
        RACE_NATAM => {:type => ::Thrift::Types::DOUBLE, :name => 'race_natam'},
        RACE_ASIAN => {:type => ::Thrift::Types::DOUBLE, :name => 'race_asian'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class VoterRecord
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ID = 1
      FIRST_NAME = 2
      MIDDLE_NAME = 3
      LAST_NAME = 4
      DOB = 5
      ADDRESS = 6
      LOCATION = 7
      GENERAL_ELECTIONS = 8
      PARTY = 9
      REGISTRATION_DATE = 11
      AUTO_VERIFY = 12
      SCORES = 13
      VOTER_SCORE = 14
      NUM_GENERAL_ELECTION_VOTES = 15
      NUM_PRIMARY_ELECTION_VOTES = 16
      PRIMARY_VOTE_TYPES = 17
      GENERAL_VOTE_TYPES = 18
      PHONE = 19
      VB_PHONE = 20
      VB_PHONE_TYPE = 21
      VB_PHONE_WIRELESS = 22
      TS_WIRELESS_PHONE = 23
      EMAIL = 24
      EMAIL_APPEND_LEVEL = 25

      FIELDS = {
        ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
        FIRST_NAME => {:type => ::Thrift::Types::STRING, :name => 'first_name'},
        MIDDLE_NAME => {:type => ::Thrift::Types::STRING, :name => 'middle_name'},
        LAST_NAME => {:type => ::Thrift::Types::STRING, :name => 'last_name'},
        DOB => {:type => ::Thrift::Types::STRING, :name => 'dob'},
        ADDRESS => {:type => ::Thrift::Types::STRUCT, :name => 'address', :class => ::ThriftDefs::GeoTypes::Address},
        LOCATION => {:type => ::Thrift::Types::STRUCT, :name => 'location', :class => ::ThriftDefs::GeoTypes::Coordinate},
        GENERAL_ELECTIONS => {:type => ::Thrift::Types::MAP, :name => 'general_elections', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::BOOL}},
        PARTY => {:type => ::Thrift::Types::I32, :name => 'party', :enum_class => ::ThriftDefs::VoterRecordTypes::PoliticalParty},
        REGISTRATION_DATE => {:type => ::Thrift::Types::STRING, :name => 'registration_date'},
        AUTO_VERIFY => {:type => ::Thrift::Types::BOOL, :name => 'auto_verify'},
        SCORES => {:type => ::Thrift::Types::STRUCT, :name => 'scores', :class => ::ThriftDefs::VoterRecordTypes::Scores},
        VOTER_SCORE => {:type => ::Thrift::Types::I32, :name => 'voter_score', :enum_class => ::ThriftDefs::VoterRecordTypes::VoterScore},
        NUM_GENERAL_ELECTION_VOTES => {:type => ::Thrift::Types::I32, :name => 'num_general_election_votes'},
        NUM_PRIMARY_ELECTION_VOTES => {:type => ::Thrift::Types::I32, :name => 'num_primary_election_votes'},
        PRIMARY_VOTE_TYPES => {:type => ::Thrift::Types::MAP, :name => 'primary_vote_types', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::I32, :enum_class => ::ThriftDefs::VoterRecordTypes::VoteType}},
        GENERAL_VOTE_TYPES => {:type => ::Thrift::Types::MAP, :name => 'general_vote_types', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::I32, :enum_class => ::ThriftDefs::VoterRecordTypes::VoteType}},
        PHONE => {:type => ::Thrift::Types::STRING, :name => 'phone'},
        VB_PHONE => {:type => ::Thrift::Types::STRING, :name => 'vb_phone'},
        VB_PHONE_TYPE => {:type => ::Thrift::Types::I32, :name => 'vb_phone_type', :enum_class => ::ThriftDefs::VoterRecordTypes::PhoneType},
        VB_PHONE_WIRELESS => {:type => ::Thrift::Types::STRING, :name => 'vb_phone_wireless'},
        TS_WIRELESS_PHONE => {:type => ::Thrift::Types::STRING, :name => 'ts_wireless_phone'},
        EMAIL => {:type => ::Thrift::Types::STRING, :name => 'email'},
        EMAIL_APPEND_LEVEL => {:type => ::Thrift::Types::I32, :name => 'email_append_level', :enum_class => ::ThriftDefs::VoterRecordTypes::EmailMatchType}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @party.nil? || ::ThriftDefs::VoterRecordTypes::PoliticalParty::VALID_VALUES.include?(@party)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field party!')
        end
        unless @voter_score.nil? || ::ThriftDefs::VoterRecordTypes::VoterScore::VALID_VALUES.include?(@voter_score)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field voter_score!')
        end
        unless @vb_phone_type.nil? || ::ThriftDefs::VoterRecordTypes::PhoneType::VALID_VALUES.include?(@vb_phone_type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field vb_phone_type!')
        end
        unless @email_append_level.nil? || ::ThriftDefs::VoterRecordTypes::EmailMatchType::VALID_VALUES.include?(@email_append_level)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field email_append_level!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class VoterRecords
      include ::Thrift::Struct, ::Thrift::Struct_Union
      VOTER_RECORDS = 1

      FIELDS = {
        VOTER_RECORDS => {:type => ::Thrift::Types::LIST, :name => 'voter_records', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ThriftDefs::VoterRecordTypes::VoterRecord}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class UniqueIdentifiers < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def ids(val)
          UniqueIdentifiers.new(:ids, val)
        end
      end

      IDS = 1

      FIELDS = {
        IDS => {:type => ::Thrift::Types::LIST, :name => 'ids', :element => {:type => ::Thrift::Types::STRING}, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

  end
end
