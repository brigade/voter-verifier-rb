#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'thrift_defs/voter_verifier/voter_verifier_types'

module ThriftDefs
  module VoterVerifier
    module Service
      class Client
        include ::Thrift::Client

        def get_voter_records_by_identifiers(headers, request)
          send_get_voter_records_by_identifiers(headers, request)
          return recv_get_voter_records_by_identifiers()
        end

        def send_get_voter_records_by_identifiers(headers, request)
          send_message('get_voter_records_by_identifiers', Get_voter_records_by_identifiers_args, :headers => headers, :request => request)
        end

        def recv_get_voter_records_by_identifiers()
          result = receive_message(Get_voter_records_by_identifiers_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_voter_records_by_identifiers failed: unknown result')
        end

        def search(headers, request)
          send_search(headers, request)
          return recv_search()
        end

        def send_search(headers, request)
          send_message('search', Search_args, :headers => headers, :request => request)
        end

        def recv_search()
          result = receive_message(Search_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.state_exception unless result.state_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'search failed: unknown result')
        end

        def contact_search(headers, request)
          send_contact_search(headers, request)
          return recv_contact_search()
        end

        def send_contact_search(headers, request)
          send_message('contact_search', Contact_search_args, :headers => headers, :request => request)
        end

        def recv_contact_search()
          result = receive_message(Contact_search_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'contact_search failed: unknown result')
        end

        def get_random_addresses(headers, request)
          send_get_random_addresses(headers, request)
          return recv_get_random_addresses()
        end

        def send_get_random_addresses(headers, request)
          send_message('get_random_addresses', Get_random_addresses_args, :headers => headers, :request => request)
        end

        def recv_get_random_addresses()
          result = receive_message(Get_random_addresses_result)
          return result.success unless result.success.nil?
          raise result.argument_exception unless result.argument_exception.nil?
          raise result.unauthorized_exception unless result.unauthorized_exception.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_random_addresses failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_get_voter_records_by_identifiers(seqid, iprot, oprot)
          args = read_args(iprot, Get_voter_records_by_identifiers_args)
          result = Get_voter_records_by_identifiers_result.new()
          begin
            result.success = @handler.get_voter_records_by_identifiers(args.headers, args.request)
          rescue ::ThriftDefs::ExceptionTypes::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftDefs::ExceptionTypes::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'get_voter_records_by_identifiers', seqid)
        end

        def process_search(seqid, iprot, oprot)
          args = read_args(iprot, Search_args)
          result = Search_result.new()
          begin
            result.success = @handler.search(args.headers, args.request)
          rescue ::ThriftDefs::ExceptionTypes::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftDefs::ExceptionTypes::StateException => state_exception
            result.state_exception = state_exception
          rescue ::ThriftDefs::ExceptionTypes::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'search', seqid)
        end

        def process_contact_search(seqid, iprot, oprot)
          args = read_args(iprot, Contact_search_args)
          result = Contact_search_result.new()
          begin
            result.success = @handler.contact_search(args.headers, args.request)
          rescue ::ThriftDefs::ExceptionTypes::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftDefs::ExceptionTypes::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'contact_search', seqid)
        end

        def process_get_random_addresses(seqid, iprot, oprot)
          args = read_args(iprot, Get_random_addresses_args)
          result = Get_random_addresses_result.new()
          begin
            result.success = @handler.get_random_addresses(args.headers, args.request)
          rescue ::ThriftDefs::ExceptionTypes::ArgumentException => argument_exception
            result.argument_exception = argument_exception
          rescue ::ThriftDefs::ExceptionTypes::UnauthorizedException => unauthorized_exception
            result.unauthorized_exception = unauthorized_exception
          end
          write_result(result, oprot, 'get_random_addresses', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Get_voter_records_by_identifiers_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftDefs::RequestTypes::Headers},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftDefs::RequestTypes::GetVoterRecordsByIdentifiers}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_voter_records_by_identifiers_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftDefs::VoterRecordTypes::VoterRecords},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftDefs::ExceptionTypes::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftDefs::ExceptionTypes::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Search_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftDefs::RequestTypes::Headers},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftDefs::RequestTypes::Search}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Search_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        STATE_EXCEPTION = 2
        UNAUTHORIZED_EXCEPTION = 3

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftDefs::VoterRecordTypes::VoterRecords},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftDefs::ExceptionTypes::ArgumentException},
          STATE_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'state_exception', :class => ::ThriftDefs::ExceptionTypes::StateException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftDefs::ExceptionTypes::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Contact_search_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftDefs::RequestTypes::Headers},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftDefs::RequestTypes::ContactSearch}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Contact_search_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftDefs::VoterRecordTypes::VoterRecords},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftDefs::ExceptionTypes::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftDefs::ExceptionTypes::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_random_addresses_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        HEADERS = 1
        REQUEST = 2

        FIELDS = {
          HEADERS => {:type => ::Thrift::Types::STRUCT, :name => 'headers', :class => ::ThriftDefs::RequestTypes::Headers},
          REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ThriftDefs::RequestTypes::RandomAddress}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_random_addresses_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        ARGUMENT_EXCEPTION = 1
        UNAUTHORIZED_EXCEPTION = 2

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ThriftDefs::GeoTypes::Addresses},
          ARGUMENT_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'argument_exception', :class => ::ThriftDefs::ExceptionTypes::ArgumentException},
          UNAUTHORIZED_EXCEPTION => {:type => ::Thrift::Types::STRUCT, :name => 'unauthorized_exception', :class => ::ThriftDefs::ExceptionTypes::UnauthorizedException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
