#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module ThriftDefs
  module ExceptionTypes
    module ExceptionClass
      CLIENT = 0
      SERVER = 1
      UPSTREAM = 2
      VALUE_MAP = {0 => "CLIENT", 1 => "SERVER", 2 => "UPSTREAM"}
      VALID_VALUES = Set.new([CLIENT, SERVER, UPSTREAM]).freeze
    end

    module ArgumentExceptionCode
      PRESENCE = 0
      INVALID = 1
      INVALID_LENGTH = 2
      NOT_IN_SET = 3
      VALUE_MAP = {0 => "PRESENCE", 1 => "INVALID", 2 => "INVALID_LENGTH", 3 => "NOT_IN_SET"}
      VALID_VALUES = Set.new([PRESENCE, INVALID, INVALID_LENGTH, NOT_IN_SET]).freeze
    end

    module StateExceptionCode
      ALREADY_EXISTS = 0
      LIMIT_REACHED = 1
      RESOURCE_NOT_FOUND = 2
      VALUE_MAP = {0 => "ALREADY_EXISTS", 1 => "LIMIT_REACHED", 2 => "RESOURCE_NOT_FOUND"}
      VALID_VALUES = Set.new([ALREADY_EXISTS, LIMIT_REACHED, RESOURCE_NOT_FOUND]).freeze
    end

    class ArgumentException < ::Thrift::Exception; end

    class UnauthorizedException < ::Thrift::Exception; end

    class StateException < ::Thrift::Exception; end

    class ArgumentException < ::Thrift::Exception
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MESSAGE = 1
      PATH = 2
      CODE = 3
      EXCEPTION_CLASS = 4

      FIELDS = {
        MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'},
        PATH => {:type => ::Thrift::Types::STRING, :name => 'path'},
        CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::ThriftDefs::ExceptionTypes::ArgumentExceptionCode},
        EXCEPTION_CLASS => {:type => ::Thrift::Types::I32, :name => 'exception_class', :default =>         0, :enum_class => ::ThriftDefs::ExceptionTypes::ExceptionClass}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @code.nil? || ::ThriftDefs::ExceptionTypes::ArgumentExceptionCode::VALID_VALUES.include?(@code)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
        end
        unless @exception_class.nil? || ::ThriftDefs::ExceptionTypes::ExceptionClass::VALID_VALUES.include?(@exception_class)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field exception_class!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class UnauthorizedException < ::Thrift::Exception
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MESSAGE = 1
      EXCEPTION_CLASS = 2

      FIELDS = {
        MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'},
        EXCEPTION_CLASS => {:type => ::Thrift::Types::I32, :name => 'exception_class', :default =>         0, :enum_class => ::ThriftDefs::ExceptionTypes::ExceptionClass}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @exception_class.nil? || ::ThriftDefs::ExceptionTypes::ExceptionClass::VALID_VALUES.include?(@exception_class)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field exception_class!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class StateException < ::Thrift::Exception
      include ::Thrift::Struct, ::Thrift::Struct_Union
      MESSAGE = 1
      CODE = 2
      EXCEPTION_CLASS = 3

      FIELDS = {
        MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'},
        CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::ThriftDefs::ExceptionTypes::StateExceptionCode},
        EXCEPTION_CLASS => {:type => ::Thrift::Types::I32, :name => 'exception_class', :default =>         0, :enum_class => ::ThriftDefs::ExceptionTypes::ExceptionClass}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @code.nil? || ::ThriftDefs::ExceptionTypes::StateExceptionCode::VALID_VALUES.include?(@code)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
        end
        unless @exception_class.nil? || ::ThriftDefs::ExceptionTypes::ExceptionClass::VALID_VALUES.include?(@exception_class)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field exception_class!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
