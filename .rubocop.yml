# Rubocop configuration settings for Brigade Ruby services
#
# If you want to override the configuration for a particular directory in the
# repo, add a `.rubocop.yml` file to that directory and make it `inherit_from`
# this file, using a relative path.

AllCops:
  TargetRubyVersion: 2.5
  DisplayCopNames: true
  UseCache: true
  CacheRootDirectory: ./tmp/cache

# This is unnecessary since there are already other ways of measuring method
# size/complexity.
AbcSize:
  Enabled: false

AccessModifierIndentation:
  Enabled: true
  EnforcedStyle: indent

# This lint prohibits method names starting with `get_`, which is often good
# advice but wrong too often to be worthwhile.
AccessorMethodName:
  Enabled: false

# Allow developers to pass regexes as arguments without enclosing parens, e.g.
#
#   response.body.should match /some regex/
AmbiguousRegexpLiteral:
  Enabled: false

# Allow the case equality ("threequals") operator, which is often useful,
# especially for working with RSpec.
CaseEquality:
  Enabled: false

ClassLength:
  Severity: warning

# Don't require use of `collect` over `map`
CollectionMethods:
  Enabled: false

CommentAnnotation:
  Enabled: false

CyclomaticComplexity:
  Severity: warning

Debugger:
  Severity: error # binding.pry blocks!

Documentation:
  Exclude:
    # Exclude concerns so that people aren't forced to document ClassMethods
    # modules.
    - 'config/**/*'
    # Namespacing specs can be useful, and rubocop doesn't detect that
    - 'spec/**/*'

DoubleNegation:
  Enabled: false

FileName:
  Exclude:
    - 'script/*'
    - '.overcommit_gems.rb'

# This disagrees with our current style and doesn't really matter.
FirstParameterIndentation:
  Enabled: false

# Don't enforce using if/unless modifiers when you have a single-line body.
IfUnlessModifier:
  Enabled: false

# Don't favor sprintf/format over the use of String#%, as
#
#   '%s' % value
#
# is more concise than
#
#   sprintf('%s', value)
FormatString:
  Enabled: false

# We want to allow multi-line lambdas using the `->` syntax which Rubocop
# doesn't allow. We're also not too worried about people using `lambda` for
# single-line lambdas either.
Lambda:
  Enabled: false

# Avoid lines longer than 100 characters. The theory is that there are times
# where forcing a wrap to 80 characters can actually harm readability, but if
# you're hitting 100 there is probably a way to condense what you're trying to
# express.
LineLength:
  Max: 100
  IgnoredPatterns:
    - '\A#' # Allow longer comments

# There are a number of places where it makes sense to chain do...end blocks
MethodCalledOnDoEndBlock:
  Enabled: false

# Avoid methods longer than 30 lines. This is larger than the default 10, but
# hopefully we can gradually lower it over time.
MethodLength:
  Severity: warning
  Max: 30

Metrics/ModuleLength:
  Severity: warning

Metrics/BlockLength:
  Severity: warning
  Exclude:
    - lib/tasks/**/*
    - spec/**/*

# Because we sometimes use RSpec's implicit subject syntax, we need to be able
# to format blocks more flexibly than in the main codebase.
MultilineBlockLayout:
  Exclude:
    - spec/**/*

# It is OK for Rake tasks to write to STDOUT
Output:
  Exclude:
    - lib/tasks/**/*

ParameterLists:
  CountKeywordArgs: false

PerceivedComplexity:
  Severity: warning

# Prefer curly braces except for %i/%w/%W, since those return arrays.
PercentLiteralDelimiters:
  PreferredDelimiters:
    '%': '{}'
    '%i': '[]'
    '%q': '{}'
    '%Q': '{}'
    '%r': '{}'
    '%s': '()'
    '%w': '[]'
    '%W': '[]'
    '%x': '{}'

# Forcing the name of a predicate to `doctor?` makes it difficult to tell if it
# is a "has-a" or a "is-a" predicate, so disable it.
PredicateName:
  Enabled: false

# Forcing use of intermediate models can lead to extra clutter
Rails/HasAndBelongsToMany:
  Enabled: false

# This doesn't allow inheritance or multi-level YAML configs, which we use a lot.
Security/YAMLLoad:
  Enabled: false

ShadowingOuterLocalVariable:
  Severity: error

# Disable enforcing `raise` keyword only inside `rescue` blocks. This check had
# widespread disapproval.
SignalException:
  Enabled: false

# Forcing the naming of arguments to `reduce` to be `|a, e|` isn't very useful.
SingleLineBlockParams:
  Enabled: false

Layout/SpaceBeforeFirstArg:
  AllowForAlignment: true

# There's no reason to enforce only using ASCII in comments.
Style/AsciiComments:
  Enabled: false

Style/ModuleFunction:
  Enabled: false

Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented

Layout/MultilineMethodCallBraceLayout:
  Enabled: false

Style/NumericLiterals:
  Exclude:
    - spec/**/*
    - config/**/*

# It doesn't seem like .zero? and .nonzero? are more readable than == 0
Style/NumericPredicate:
  Enabled: false

# This triggered on `(request.original_url =~ /\?/) ? '&' : '?'`, which doesn't
# seem reasonable.
Style/TernaryParentheses:
  Enabled: false

Style/TrailingCommaInArrayLiteral:
  EnforcedStyleForMultiline: comma

Style/TrailingCommaInHashLiteral:
  EnforcedStyleForMultiline: comma

Style/TrailingCommaInArguments:
  EnforcedStyleForMultiline: comma

# Unreachable code is dead code, and should be removed.
UnreachableCode:
  Severity: error

UnusedMethodArgument:
  AllowUnusedKeywordArguments: true

# Wastes CPU time, especially if the right-hand expression is expensive
UselessAssignment:
  Severity: error

# We don't have a preference for this case.
WhileUntilModifier:
  Enabled: false

# Two strings in an array is not indicative that the array is likely to have
# elements added to it in the future, so up the minimum number of elements we
# warn on to 3.
WordArray:
  MinSize: 3

Layout/ClosingParenthesisIndentation:
  Enabled: false

Style/SpecialGlobalVars:
  Enabled: false

# Checks for frozen string comment, designed to help upgrade to Ruby 3.0 (where
# frozen string literals will be default); disabled because we prefer calling `.freeze`
# on our string literals rather than using a magic comment.
Style/FrozenStringLiteralComment:
  Enabled: false

Layout/DotPosition:
  EnforcedStyle: trailing
